
// rb::Manager& rbc() 
// {
//    return rb::Manager::get();
// }

// rbc().install(rb::MAN_DISABLE_BATTERY_MANAGEMENT | rb::MAN_DISABLE_MOTOR_FAILSAFE);

// rbc().schedule(200, vypis_IR);  // spusti casovac kazdych 200ms presne pomoci preruseni (ostatni veci pockaji)

bool vypis_IR() {        // funkce pouzita do preruseni musi byt bool, musi vracet true, muze jich byt 10 a vice
    // vypis hodnot na IR zleva do prava 
    Serial.print("** ");
    Serial.print(digitalRead(33));
    Serial.print(" ");
    Serial.print(digitalRead(5));
    Serial.print(" ");
    Serial.print(digitalRead(27));
    Serial.print(" ");
    Serial.print(digitalRead(26));
    Serial.print(" ");
    Serial.print(digitalRead(25));
    Serial.print( !( digitalRead(33) and digitalRead(5) and digitalRead(27) and digitalRead(26) and digitalRead(25) ) ? " stop " : " ok " );
    Serial.println(" **");
    return true;
}

     if (send_data) {
        send_data.ack();
        if (L_G_light) L_G_light = false; else  L_G_light = true;
        rbc().leds().green(L_G_light);
        // Serial.print(!digitalRead(17)); Serial.print("  ");
        // Serial.print(!digitalRead(18)); Serial.print("  ");
        // Serial.print(!digitalRead(5)); Serial.print("  ");
        // Serial.print(analogRead(27)); Serial.print("  ");
         SerialBT.println (millis());
        // Serial.println(left_enc);
        Serial1.write("a");

        Serial.print(rbc().motor(LEFT_MOTOR)->encoder()->value()); // cteni enkoderu
        Serial.print('\t');
        Serial.println(rbc().motor(RIGHT_MOTOR)->encoder()->value());
    }

if(Serial1.available()) {
        char c = Serial1.read();
        Serial.write(c); 


        rb::Manager& rbc() 
{
    static rb::Manager m(false, false);  // ve výchozím stavu se motory po puštění tlačítka vypínají, false zařídí, že pojedou, dokud nedostanou další pokyn 
    return m;                            // druhe false vypina kontrolu baterky pres pin 34 a vypinani pohonu a cipu pri nizkem napeti     
}

Stream* serial = nullptr;  // pouziva se, kdyz se prohazuje Serial a SerialBT 


        // qrd[0] = analogRead(36)/4;
        // qrd[1] = analogRead(39)/4;
        // qrd[2] = analogRead(34)/4;
        // qrd[3] = analogRead(35)/4;
        // qrd[4] = analogRead(32)/4;

        // qrd[5] = analogRead(33)/4;
        // qrd[6] = analogRead(25)/4;
        // qrd[7] = analogRead(26)/4;
        // qrd[8] = analogRead(27)/4;
        // qrd[9] = analogRead(14)/4;

        // qrd[10] = analogRead(12)/4;
        // qrd[11] = analogRead(13)/4;

   // Serial.print(qrd[0]); Serial.print("  "); // INPUT je zaply implicitne, pull up nepotrebuju, protoze je odpor na desce se senzory 
        // Serial.print(qrd[1]); Serial.print("  "); // zadni lista
        // Serial.print(qrd[2]); Serial.print("  ");
        // Serial.print(qrd[3]); Serial.print("  ");
        // Serial.print(qrd[4]); Serial.print("  "); 

        // Serial.print(qrd[5]); Serial.print("  ");  // predni lista 
        // Serial.print(qrd[6]); Serial.print("  "); 
        // Serial.print(qrd[7]); Serial.print("  ");
        // Serial.print(qrd[8]); Serial.print("  ");
        // Serial.print(qrd[9]); Serial.print("  "); 

        // Serial.print(qrd[10]); Serial.print("  "); // stred vpravo 
        // Serial.print(qrd[11]); Serial.print("  "); // stred vlevo 

                // Serial1.write(qrd[0]);
        // Serial1.write(qrd[1]);
        // Serial1.write(qrd[2]);
        // Serial1.write(qrd[3]);
        // Serial1.write(qrd[4]);

        // Serial1.write(qrd[5]);
        // Serial1.write(qrd[6]);
        // Serial1.write(qrd[7]);
        // Serial1.write(qrd[8]);
        // Serial1.write(qrd[9]);

        // Serial1.write(qrd[10]);
        // Serial1.write(qrd[11]);

        // Serial.print(c); 
        // Serial.print ("  ");
        // Serial.println (millis());


  // Serial.print(!digitalRead(17)); Serial.print("  ");
        // Serial.print(!digitalRead(18)); Serial.print("  ");
        // Serial.print(!digitalRead(5)); Serial.print("  ");
        // Serial.print(analogRead(27)); Serial.print("  ");	
        // SerialBT.println (millis());
        // Serial.println(left_enc);
        //Serial1.write("a");

            // qrd[0] = Serial1.read();
    // qrd[1] = Serial1.read();
    // qrd[2] = Serial1.read();
    // qrd[3] = Serial1.read();
    // qrd[4] = Serial1.read();

    // qrd[5] = Serial1.read();
    // qrd[6] = Serial1.read();
    // qrd[7] = Serial1.read();
    // qrd[8] = Serial1.read();
    // qrd[9] = Serial1.read();

    // qrd[10] = Serial1.read();
    // qrd[11] = Serial1.read();




    bool kontrola = read_qrd();
        for(byte b = 0; b<12; b++) printf("#%u: %u ",b, qrd[b]); 
        printf("  %s  %lu \n", kontrola ? "OK" : "Chyba", millis());


        // Serial.print(rbc().motor(LEFT_MOTOR)->encoder()->value()); // cteni enkoderu
        // Serial.print('\t');
        // Serial.println(rbc().motor(RIGHT_MOTOR)->encoder()->value());
        
#if !defined(SerialBT) 
BluetoothSerial SerialBT;
#endif

a.ok = ( ( ((levy >= 0) and (a.left_enc < 2)) or  ((levy <= 0) and (a.left_enc > 2)) ) and 
                 ( ((pravy >= 0) and (a.right_enc < 2)) or  ((pravy <= 0) and (a.right_enc > 2)) ) ) ? true : false ;

                 // if (!rbc().expander().digitalRead(rb::POWER_OFF_EXPANDER)); {
    //     Serial.println("***************** DESKA JE VYPNUTA !!!!!! ************************");
    //     Serial.println("***************** DESKA JE VYPNUTA !!!!!! ************************");
    //     SerialBT.println("***************** DESKA JE VYPNUTA !!!!!! ************************");
    //     SerialBT.println("***************** DESKA JE VYPNUTA !!!!!! ************************");
    // }    

    
            // case 'l':
            //     rbc().motor(RIGHT_MOTOR)->drive(otacka, 45, nullptr); //  tik; na otacku 
            //     break;
            // case 'p':
            //     rbc().motor(LEFT_MOTOR)->drive(otacka, 45, nullptr);
            //     break;

   // pocet serv (MUSI byt spravne), cislo  hardwarove seriove linky, pin, na kterém jsou serva připojena (všechna na jednom) IO14 by default
    // ID je tady od 0, ale HW je od 1! - toto Hadrwarove ID se musi nastavit specialni destickou - pouze jednou 
    // rbc().servoBus().limit(0, 0_deg, 240_deg); // ID, minimalni, maximalni hodnota - toto se nastavuje pouze jednou
    // rbc().servoBus().set(0, 120_deg, 150); // ID, cilova poloha, rychlost, [zrychleni a zpomaleni na zacatku a konci pohybu, 1.f toto vypina]
//**********************************************


    //rbc().servoBus().limit(0, Angle::deg(25), Angle::deg(130)); // stav 0 = 25/130
    //rbc().servoBus().limit(1, Angle::deg(80), Angle::deg(180)); // stav 1 = 180/80

//**********************************************//**********************************************
//**********************************************
//**********************************************
//**********************************************
//**********************************************


 // {
    //     bool axis_mark[4];

    //     int8_t speed_l;
    //     int8_t speed_r;

    //     float end_axis[2];
    

    //     if(axis[0]<0)
    //     {
    //         axis_mark[0] = false;
    //         end_axis[0] = -((axis[0]/128.0)*(axis[0]/128.0)*(axis[0]/128.0));
    //     }
    //     else
    //     {
    //         axis_mark[0] = true;
    //         end_axis[0] = ((axis[0]/128.0)*(axis[0]/128.0)*(axis[0]/128.0));
    //     }
        
    //     if(axis[1]<0)
    //     {
    //         axis_mark[1] = false;
    //         end_axis[1] = -((axis[1]/128.0)*(axis[1]/128.0)*(axis[1]/128.0));
    //         if(!axis_mark[0])
    //         {
    //             Serial.println("K 3");
    //             if(end_axis[1]+end_axis[0]<=1)
    //             {
    //                 speed_l = -(end_axis[1]+end_axis[0])*100;
    //                 rbc().setMotors().power(LEFT_MOTOR, speed_l);
    //             }
    //             else
    //             {
    //                 rbc().setMotors().power(LEFT_MOTOR, -100);
    //             }                    
    //         }
    //         else
    //         {
    //             Serial.println("K 4");

    //             speed_l = (end_axis[0]-end_axis[1])*100;
    //             rbc().setMotors().power(LEFT_MOTOR, speed_l);
    //         }
    //     }
    //     else
    //     {
    //         axis_mark[1] = true;
    //         end_axis[1] = ((axis[1]/128.0)*(axis[1]/128.0)*(axis[1]/128.0));
    //         if(!axis_mark[0])
    //         {
    //             Serial.println("K 2");

    //             if(end_axis[1]-end_axis[0]<=1)
    //             {
    //                 speed_l = (end_axis[1]-end_axis[0])*100;
    //                 rbc().setMotors().power(LEFT_MOTOR, speed_l);
    //             }
    //             else
    //             {
    //                 rbc().setMotors().power(LEFT_MOTOR, 100);
    //             }                    
    //         }
    //         else
    //         {
    //             if(end_axis[1]+end_axis[0]<=1)
    //             {
    //                 Serial.println("K 1");
    //                 axis_mark[2] = false;
    //                 speed_l = (end_axis[1]+end_axis[0])*100;
    //                 rbc().setMotors().power(LEFT_MOTOR, speed_l);
    //             }
    //             else
    //             {
    //                 axis_mark[2] = false;
    //                 rbc().setMotors().power(LEFT_MOTOR, 100);
    //             }
    //         }
    //     }

    //     if(axis[1]<0)
    //     {
    //         axis_mark[1] = false;
    //         end_axis[1] = -((axis[1]/128.0)*(axis[1]/128.0)*(axis[1]/128.0));
    //         if(!axis_mark[0])
    //         {
    //             speed_r = (end_axis[0]-end_axis[1])*100;
    //             rbc().setMotors().power(RIGHT_MOTOR, speed_r);                 
    //         }
    //         else
    //         {
    //             if(end_axis[1]-end_axis[0]<=1)
    //             {
    //                 axis_mark[2] = false;
    //                 speed_r = -(end_axis[1]+end_axis[0])*100;
    //                 rbc().setMotors().power(RIGHT_MOTOR, speed_r);
    //             }
    //             else
    //             {
    //                 axis_mark[2] = false;
    //                 rbc().setMotors().power(RIGHT_MOTOR, -100);
    //             }
    //         }
    //     }
    //     else
    //     {
    //         axis_mark[1] = true;
    //         end_axis[1] = ((axis[1]/128.0)*(axis[1]/128.0)*(axis[1]/128.0));
    //         if(!axis_mark[0])
    //         {
    //             if(end_axis[1]+end_axis[0]<=1)
    //             {
    //                 speed_r = (end_axis[1]+end_axis[0])*100;
    //                 rbc().setMotors().power(RIGHT_MOTOR, speed_r);
    //             }
    //             else
    //             {
    //                 rbc().setMotors().power(RIGHT_MOTOR, 100);
    //             }                    
    //         }
    //         else
    //         {
    //             if(end_axis[1]-end_axis[0]<=1)
    //             {
    //                 axis_mark[2] = false;
    //                 speed_r = (end_axis[1]-end_axis[0])*100;
    //                 rbc().setMotors().power(RIGHT_MOTOR, speed_r);
    //             }
    //             else
    //             {
    //                 axis_mark[2] = false;
    //                 rbc().setMotors().power(RIGHT_MOTOR, 100);
    //             }
    //         }
    //     }
    //     rbc().setMotors().set();
        
    //     if (axis[5] > 100 ) // pouze zapnuto/vypnuto
    //     {
    //         rbc().servoBus().set(0, 35, 300.f, 1.5f);
    //         rbc().servoBus().set(1, 175, 300.f, 1.5f);
    //         poloha_0 = 35;
    //         poloha_1 = 175;
    //     }
    //     if (axis[5] < -100 ) // pouze zapnuto/vypnuto
    //     {
    //         rbc().servoBus().set(0, 130, 300.f, 1.5f);
    //         rbc().servoBus().set(1, 80, 300.f, 1.5f);
    //         poloha_0 = 130;
    //         poloha_1 = 80;
    //     }
    //     float rychlost = (-axis[2]+129)/128.0;
    //     if (btn[5] == 1 )
    //         rychlost_0 = rychlost;
    //     else if (btn[6] == 1 )
    //          rychlost_0 = -rychlost;
    //     else
    //         rychlost_0 =0;

    //     if (btn[8] == 1 )
    //         rychlost_1 = rychlost;
    //     else if (btn[7] == 1 )
    //          rychlost_1 = -rychlost;
    //     else
    //         rychlost_1 =0;

    //     Serial.print(poloha_0); Serial.print(" "); 
    //     Serial.print(poloha_1); Serial.print(" ");
    // }

